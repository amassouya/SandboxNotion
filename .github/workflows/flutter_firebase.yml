name: Build-Test-Deploy

on:
  push:
    branches: [ main ]
  schedule:
    # Nightly build at 2 AM UTC
    - cron: '0 2 * * *'

env:
  PROJECT_ID: sandboxnotion
  FLUTTER_VERSION: '3.22.0'
  JAVA_VERSION: '17'
  NODE_VERSION: '20'

jobs:
  test:
    name: Test Flutter App
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'
          flutter-version: ${{ env.FLUTTER_VERSION }}
          cache: true
      
      - name: Install dependencies
        run: flutter pub get
      
      - name: Verify formatting
        run: dart format --output=none --set-exit-if-changed .
      
      - name: Analyze project source
        run: flutter analyze
      
      - name: Run unit tests
        run: flutter test --coverage
      
      - name: Upload test coverage
        uses: codecov/codecov-action@v3
        with:
          file: coverage/lcov.info
          fail_ci_if_error: false

  build-web:
    name: Build & Deploy Web
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'
          flutter-version: ${{ env.FLUTTER_VERSION }}
          cache: true
      
      - name: Install dependencies
        run: flutter pub get
      
      - name: Setup Firebase config
        run: |
          echo "${{ secrets.FIREBASE_SERVICE_ACCOUNT_SANDBOX }}" > serviceAccount-sandbox.json
          mkdir -p web/firebase
          echo "// Firebase config from GitHub Actions" > web/firebase/config.js
          echo "const firebaseConfig = {" >> web/firebase/config.js
          echo "  apiKey: '${{ secrets.FIREBASE_WEB_API_KEY }}'," >> web/firebase/config.js
          echo "  authDomain: '${{ env.PROJECT_ID }}.firebaseapp.com'," >> web/firebase/config.js
          echo "  projectId: '${{ env.PROJECT_ID }}'," >> web/firebase/config.js
          echo "  storageBucket: '${{ env.PROJECT_ID }}.appspot.com'," >> web/firebase/config.js
          echo "  messagingSenderId: '889983767784'," >> web/firebase/config.js
          echo "  appId: '1:889983767784:web:ee1505262ed22221a4655d'," >> web/firebase/config.js
          echo "  measurementId: 'G-M3Q4PS16KG'" >> web/firebase/config.js
          echo "};" >> web/firebase/config.js
      
      - name: Build web
        run: flutter build web --release
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'functions/package-lock.json'
      
      - name: Install Firebase CLI
        run: npm install -g firebase-tools
      
      - name: Deploy to Firebase Hosting
        uses: FirebaseExtended/action-hosting-deploy@v0
        with:
          repoToken: ${{ secrets.GITHUB_TOKEN }}
          firebaseServiceAccount: ${{ secrets.FIREBASE_SERVICE_ACCOUNT_SANDBOX }}
          channelId: live
          projectId: ${{ env.PROJECT_ID }}
  
  deploy-functions:
    name: Deploy Cloud Functions
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'functions/package-lock.json'
      
      - name: Install dependencies
        working-directory: functions
        run: npm ci
      
      - name: Set OpenAI API key
        working-directory: functions
        run: |
          echo "Setting OpenAI API key..."
          echo "OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}" > .env
      
      - name: Build functions
        working-directory: functions
        run: npm run build
      
      - name: Deploy functions
        run: |
          npm install -g firebase-tools
          firebase deploy --only functions --project ${{ env.PROJECT_ID }} --token "${{ secrets.FIREBASE_CLI_TOKEN }}"

  build-android:
    name: Build Android APK
    # Only run on nightly schedule or when explicitly requested via workflow_dispatch
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: ${{ env.JAVA_VERSION }}
      
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'
          flutter-version: ${{ env.FLUTTER_VERSION }}
          cache: true
      
      - name: Install dependencies
        run: flutter pub get
      
      - name: Setup Android SDK
        uses: android-actions/setup-android@v2
      
      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2
      
      - name: Setup Firebase config
        run: |
          echo "${{ secrets.FIREBASE_SERVICE_ACCOUNT_SANDBOX }}" > serviceAccount-sandbox.json
          mkdir -p android/app
          echo "${{ secrets.GOOGLE_SERVICES_JSON }}" > android/app/google-services.json
      
      - name: Build APK
        run: flutter build apk --release
      
      - name: Upload APK artifact
        uses: actions/upload-artifact@v3
        with:
          name: sandboxnotion-release-apk
          path: build/app/outputs/flutter-apk/app-release.apk
          retention-days: 7
      
      - name: Start Android Emulator
        if: github.event_name == 'pull_request'
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: 34
          arch: x86_64
          profile: pixel_7
          script: |
            flutter install
            adb shell am start -n com.sandbox.notion/com.sandbox.notion.MainActivity

  # Optional iOS build job can be added here if needed
